# Generated by Django 5.2.7 on 2025-10-14 19:30

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0003_remove_profile_date_of_birth_alter_profile_avatar'),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('title', models.CharField(max_length=500)),
                ('summary', models.TextField(blank=True)),
                ('body', models.TextField(blank=True)),
                ('body_markdown', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('review', 'In Review'), ('scheduled', 'Scheduled'), ('published', 'Published'), ('archived', 'Archived')], db_index=True, default='draft', max_length=20)),
                ('canonical_url', models.CharField(blank=True, help_text='If this article is syndicated', max_length=1024)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('scheduled_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('reading_time', models.IntegerField(blank=True, null=True)),
                ('word_count', models.IntegerField(blank=True, null=True)),
                ('language', models.CharField(default='en', max_length=10)),
                ('seo', models.JSONField(blank=True, default=dict)),
                ('custom_fields', models.JSONField(blank=True, default=dict)),
                ('is_featured', models.BooleanField(db_index=True, default=False)),
                ('is_sticky', models.BooleanField(db_index=True, default=False)),
                ('view_count', models.BigIntegerField(db_index=True, default=0)),
                ('comment_count', models.IntegerField(default=0)),
                ('reading_history', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Redirect',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('from_path', models.CharField(max_length=1024, unique=True)),
                ('to_path', models.CharField(max_length=1024)),
                ('http_status', models.IntegerField(default=301)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('weight', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=120, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AuthorProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=120)),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='users.profile')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleRevision',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('summary', models.TextField(blank=True)),
                ('body', models.TextField(blank=True)),
                ('body_markdown', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_snapshot', models.BooleanField(default=False)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='core.article')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.authorprofile')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles', to='core.authorprofile'),
        ),
        migrations.AddField(
            model_name='article',
            name='co_authors',
            field=models.ManyToManyField(blank=True, related_name='coauthored_articles', to='core.authorprofile'),
        ),
        migrations.AddField(
            model_name='article',
            name='editors',
            field=models.ManyToManyField(blank=True, related_name='edited_articles', to='core.authorprofile'),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(max_length=300, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='core.category')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='categories', to='core.section')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles', to='core.category'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('body', models.TextField()),
                ('is_visible', models.BooleanField(default=True)),
                ('is_spam', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.article')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.comment')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.profile')),
            ],
        ),
        migrations.CreateModel(
            name='EditorialAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(default='assigned', max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='core.article')),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.authorprofile')),
                ('assignee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.authorprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.CharField(max_length=1024)),
                ('mime_type', models.CharField(blank=True, max_length=100)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('size', models.BigIntegerField(blank=True, null=True)),
                ('alt_text', models.CharField(blank=True, max_length=255)),
                ('meta', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_media', to='users.profile')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='primary_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.media'),
        ),
        migrations.CreateModel(
            name='PublishLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.article')),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.authorprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('kind', models.CharField(choices=[('like', 'Like'), ('bookmark', 'Bookmark'), ('clap', 'Clap'), ('upvote', 'Upvote')], max_length=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('article', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='core.article')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='core.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='users.profile')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='section',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles', to='core.section'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='articles', to='core.tag'),
        ),
        migrations.AddIndex(
            model_name='authorprofile',
            index=models.Index(fields=['display_name'], name='core_author_display_26b45a_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['article', 'created_at'], name='core_commen_article_bfea3c_idx'),
        ),
        migrations.AddIndex(
            model_name='media',
            index=models.Index(fields=['mime_type'], name='core_media_mime_ty_ff8917_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reaction',
            unique_together={('user', 'article', 'comment', 'kind')},
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['slug'], name='core_catego_slug_a504e5_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['status', 'published_at'], name='core_articl_status_1b8cb9_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['is_featured', 'published_at'], name='core_articl_is_feat_63179e_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='core_articl_search__874a34_gin'),
        ),
    ]
